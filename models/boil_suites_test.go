// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Options", testOptions)
	t.Run("Questions", testQuestions)
	t.Run("Users", testUsers)
	t.Run("Votes", testVotes)
}

func TestDelete(t *testing.T) {
	t.Run("Options", testOptionsDelete)
	t.Run("Questions", testQuestionsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("Votes", testVotesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Options", testOptionsQueryDeleteAll)
	t.Run("Questions", testQuestionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("Votes", testVotesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Options", testOptionsSliceDeleteAll)
	t.Run("Questions", testQuestionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("Votes", testVotesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Options", testOptionsExists)
	t.Run("Questions", testQuestionsExists)
	t.Run("Users", testUsersExists)
	t.Run("Votes", testVotesExists)
}

func TestFind(t *testing.T) {
	t.Run("Options", testOptionsFind)
	t.Run("Questions", testQuestionsFind)
	t.Run("Users", testUsersFind)
	t.Run("Votes", testVotesFind)
}

func TestBind(t *testing.T) {
	t.Run("Options", testOptionsBind)
	t.Run("Questions", testQuestionsBind)
	t.Run("Users", testUsersBind)
	t.Run("Votes", testVotesBind)
}

func TestOne(t *testing.T) {
	t.Run("Options", testOptionsOne)
	t.Run("Questions", testQuestionsOne)
	t.Run("Users", testUsersOne)
	t.Run("Votes", testVotesOne)
}

func TestAll(t *testing.T) {
	t.Run("Options", testOptionsAll)
	t.Run("Questions", testQuestionsAll)
	t.Run("Users", testUsersAll)
	t.Run("Votes", testVotesAll)
}

func TestCount(t *testing.T) {
	t.Run("Options", testOptionsCount)
	t.Run("Questions", testQuestionsCount)
	t.Run("Users", testUsersCount)
	t.Run("Votes", testVotesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Options", testOptionsHooks)
	t.Run("Questions", testQuestionsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("Votes", testVotesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Options", testOptionsInsert)
	t.Run("Options", testOptionsInsertWhitelist)
	t.Run("Questions", testQuestionsInsert)
	t.Run("Questions", testQuestionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("Votes", testVotesInsert)
	t.Run("Votes", testVotesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("OptionToUserUsingUser", testOptionToOneUserUsingUser)
	t.Run("OptionToQuestionUsingQuestion", testOptionToOneQuestionUsingQuestion)
	t.Run("QuestionToUserUsingUser", testQuestionToOneUserUsingUser)
	t.Run("VoteToOptionUsingOption", testVoteToOneOptionUsingOption)
	t.Run("VoteToUserUsingUser", testVoteToOneUserUsingUser)
	t.Run("VoteToQuestionUsingQuestion", testVoteToOneQuestionUsingQuestion)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OptionToVotes", testOptionToManyVotes)
	t.Run("QuestionToOptions", testQuestionToManyOptions)
	t.Run("QuestionToVotes", testQuestionToManyVotes)
	t.Run("UserToOptions", testUserToManyOptions)
	t.Run("UserToQuestions", testUserToManyQuestions)
	t.Run("UserToVotes", testUserToManyVotes)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("OptionToUserUsingOptions", testOptionToOneSetOpUserUsingUser)
	t.Run("OptionToQuestionUsingOptions", testOptionToOneSetOpQuestionUsingQuestion)
	t.Run("QuestionToUserUsingQuestions", testQuestionToOneSetOpUserUsingUser)
	t.Run("VoteToOptionUsingVotes", testVoteToOneSetOpOptionUsingOption)
	t.Run("VoteToUserUsingVotes", testVoteToOneSetOpUserUsingUser)
	t.Run("VoteToQuestionUsingVotes", testVoteToOneSetOpQuestionUsingQuestion)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("OptionToUserUsingOptions", testOptionToOneRemoveOpUserUsingUser)
	t.Run("OptionToQuestionUsingOptions", testOptionToOneRemoveOpQuestionUsingQuestion)
	t.Run("QuestionToUserUsingQuestions", testQuestionToOneRemoveOpUserUsingUser)
	t.Run("VoteToOptionUsingVotes", testVoteToOneRemoveOpOptionUsingOption)
	t.Run("VoteToUserUsingVotes", testVoteToOneRemoveOpUserUsingUser)
	t.Run("VoteToQuestionUsingVotes", testVoteToOneRemoveOpQuestionUsingQuestion)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OptionToVotes", testOptionToManyAddOpVotes)
	t.Run("QuestionToOptions", testQuestionToManyAddOpOptions)
	t.Run("QuestionToVotes", testQuestionToManyAddOpVotes)
	t.Run("UserToOptions", testUserToManyAddOpOptions)
	t.Run("UserToQuestions", testUserToManyAddOpQuestions)
	t.Run("UserToVotes", testUserToManyAddOpVotes)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("OptionToVotes", testOptionToManySetOpVotes)
	t.Run("QuestionToOptions", testQuestionToManySetOpOptions)
	t.Run("QuestionToVotes", testQuestionToManySetOpVotes)
	t.Run("UserToOptions", testUserToManySetOpOptions)
	t.Run("UserToQuestions", testUserToManySetOpQuestions)
	t.Run("UserToVotes", testUserToManySetOpVotes)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("OptionToVotes", testOptionToManyRemoveOpVotes)
	t.Run("QuestionToOptions", testQuestionToManyRemoveOpOptions)
	t.Run("QuestionToVotes", testQuestionToManyRemoveOpVotes)
	t.Run("UserToOptions", testUserToManyRemoveOpOptions)
	t.Run("UserToQuestions", testUserToManyRemoveOpQuestions)
	t.Run("UserToVotes", testUserToManyRemoveOpVotes)
}

func TestReload(t *testing.T) {
	t.Run("Options", testOptionsReload)
	t.Run("Questions", testQuestionsReload)
	t.Run("Users", testUsersReload)
	t.Run("Votes", testVotesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Options", testOptionsReloadAll)
	t.Run("Questions", testQuestionsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("Votes", testVotesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Options", testOptionsSelect)
	t.Run("Questions", testQuestionsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("Votes", testVotesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Options", testOptionsUpdate)
	t.Run("Questions", testQuestionsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("Votes", testVotesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Options", testOptionsSliceUpdateAll)
	t.Run("Questions", testQuestionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("Votes", testVotesSliceUpdateAll)
}
